// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes     Size[] @relation("StoreToSize")
  colors    Color[] @relation("StoreToColor")
  products  Product[] @relation("StoreToProduct")
  orders    Order[] @relation("StoreToOrder")
  vnpay_tmn String @default("")
  vnpay_hashSecret String @default("")
  frontendUrl String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[] @relation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store    @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])
  productSizes ProductSize[] @relation
  orderItems    OrderItem[] @relation
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  productColors ProductColor[] @relation
  orderItems    OrderItem[] @relation
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String @db.ObjectId
  category    Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  name        String
  price       Float
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)
  stock       Int @default(1)
  productColors ProductColor[]
  productSizes  ProductSize[]
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductColor {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String @db.ObjectId
  color     Color @relation(fields: [colorId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String @db.ObjectId
  size      Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
}

model Image {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AddressType {
  HOME
  WORK
}

enum PaymentMethod {
  COD
  ONLINE
}

enum orderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  DELIVERED
  CANCELLED
  NOTPAID
}

model Order {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String  @db.ObjectId
  store       Store @relation("StoreToOrder", fields: [storeId], references: [id])
  customerId  String
  orderItems  OrderItem[]
  orderMessage String @default("")
  name        String @default("")
  phone       String @default("")
  address     String @default("")
  addressType AddressType @default(HOME)
  shippingFee Float
  paymentMethod PaymentMethod @default(COD)
  orderStatus orderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  order     Order @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  color     Color @relation(fields: [colorId], references: [id])
  colorId   String  @db.ObjectId
  size      Size  @relation(fields: [sizeId], references: [id])
  sizeId    String  @db.ObjectId
  quantity  Int
}